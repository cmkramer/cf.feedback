"use strict";angular.module("cf.feedback",["pascalprecht.translate"]),angular.module("cf.feedback").constant("FEEDBACK_TYPE",{SUCCESS:"SUCCESS",ERROR:"ERROR",ALERT:"ALERT",NOTICE:"NOTICE"}),angular.module("cf.feedback").directive("feedback",["$timeout","cfFeedback",function(e,t){return{scope:{fbOptions:"=",elementId:"@feedback"},restrict:"A",controller:"FeedbackCtrl",transclude:!0,compile:function(e,n,a){return function(n){var i=function(e){n.handle(e)};""===n.elementId&&(n.elementId=void 0),t.subscribe(i,n.elementId),n.$on("$destroy",function(){t.unsubscribe(i,n.elementId)}),a(n,function(t){e.append(t)})}}}}]).controller("FeedbackCtrl",["$scope","$timeout","cfFeedback","$translate","FEEDBACK_TYPE",function(e,t,n,a,i){var c=this,r=0,s=null,o=[],u=0,f=n.getDefaultOptions();e.fbOptions&&(f=angular.extend({},f,e.fbOptions)),e.handle=function(e){l(e)},1!==f.maxMessages&&(e.feedback=[]),this.hide=function(n,a){1===f.maxMessages?(e.feedback=null,t(function(){u--,"function"==typeof a&&a()},f.replaceTime),e.$digest()):angular.forEach(e.feedback,function(i){if(i.index===n){u++,null!==i.timeout&&clearTimeout(i.timeout);for(var c=0;c<e.feedback.length;c++)if(e.feedback[c].index===n){e.feedback.splice(c,1);break}t(function(){u--,"function"==typeof a&&a()},f.replaceTime),e.$digest()}})};var l=function(e){var t={staticType:e.type},n=d(e.message);n?(t.paths=m(e.type,n),C(t),t.reference=t.paths.reference,t.message=t.reference+" (untranslated)"):(t.message=e.message,t.reference=t.message),t.details=null,t.type=e.type.toLowerCase(),t.data=e.data,p(t)&&g(t)},d=function(e){return"{"===e[0]&&"}"===e[e.length-1]?e.substring(1,e.length-1):!1},p=function(t){if(f.allowDuplicateStacked)return!0;var n=!0,a=function(e){e.type===t.type&&e.reference===t.reference&&(n=!1)};return 1===f.maxMessages&&e.feedback?a(e.feedback):angular.forEach(e.feedback,function(e){a(e)}),n},g=function(t){1===f.maxMessages&&e.feedback||1!==f.maxMessages&&e.feedback.length+u>=f.maxMessages?(y(i.NOTICE),1!==f.maxMessages||t.reference!==e.feedback.reference||o.length?E(t):h(t)):b(t)},m=function(e,t){var a=n.listTranslations();if(!a.FEEDBACK)throw new Error("Cannot find a FEEDBACK root constant reference in your loaded translations file. Make sure there is a root item called FEEDBACK in your translation file which contains all structured supported feedback messages.");var i,c,r,s=t.split("."),o="";if(i=a.FEEDBACK[e],!i)throw new Error("Cannot find FEEDBACK."+e+" in your translation file. Make sure you group your feedback by type in the translation file.");for(var u=0;u<s.length;u++){if(o+=u>0?"."+s[u]:s[u],!i[s[u]]){i=!1,c?console.debug("untranslated "+e.toLowerCase()+" feedback reference provided: "+t+". Falling back to most specific message: "+c):(r={reference:"UNKNOWN",message:"UNKNOWN"},console.debug("untranslated "+e.toLowerCase()+" feedback reference provided: "+t));break}i=i[s[u]],i._MESSAGE&&(c=o)}return i&&(r="object"==typeof i?{reference:t,message:c}:t),r},b=function(t,n){t.index=r++,r>2*f.maxMessages&&(r=0),1!==f.maxMessages?e.feedback.push(t):e.feedback=t,k(t,n||f.cleanTimeout)},E=function(t){var n=1===f.maxMessages?e.feedback:e.feedback[0];(null===s||s===i.NOTICE&&t.staticType!==i.NOTICE)&&(t.staticType!==i.NOTICE?k(n,f.minTimeout):k(n,f.queueTimeout),s=t.staticType),y(t)||o.push(t)},h=function(n){t(function(){c.hide(n[0].index,function(){b(n)}),e.$digest()})},k=function(t,n){t.timeout=setTimeout(function(){c.hide(t.index,function(){T()||(s=null)}),e.$digest()},n)},T=function(){if(o.length){var e;e=o.length>1?o[1].staticType!==i.NOTICE?f.minTimeout:f.queueTimeout:f.cleanTimeout,b(o[0],e),o.splice(0,1)}return o.length},y=function(e){for(var t=0;t<o.length;t++)if(o[t].staticType===e.staticType&&(!e||o[t].reference===e.reference))return o.splice(t--,1),!1},C=function(e){"object"==typeof e.paths?(a("FEEDBACK."+e.staticType+"."+e.paths.message+"._MESSAGE",e.data).then(function(t){e.message=t}),a("FEEDBACK."+e.staticType+"."+e.paths.reference+"._DETAILS",e.data).then(function(t){e.details=t})):a("FEEDBACK."+e.staticType+"."+e.paths,e.data).then(function(t){e.message=t})}}]),angular.module("cf.feedback").provider("cfFeedback",function(){var e,t,n=!1,a={global:[],identified:{}},i={replaceTime:300,cleanTimeout:6e3,queueTimeout:3e3,minTimeout:1e3,allowDuplicateStacked:!1,maxMessages:1};return{configureTranslations:function(a,i){e=a,t=i,n=!0},configureDefaultOptions:function(e){i=angular.extend({},i,e)},$get:function(){return{subscribe:function(e,t){void 0===t?a.global.push(e):(a.identified[t]=a.identified[t]||[],a.identified[t].push(e))},unsubscribe:function(e,t){for(var n=void 0===t?a.global:a.identified[t],i=0;i<n.length;i++)if(n[i]===e){n.splice(i,1);break}},publish:function(e){for(var t=void 0===e.contextElement?a.global:a.identified[e.contextElement],n=0;n<t.length;n++)"function"==typeof t[n]&&t[n](e)},getDefaultOptions:function(){return i},listTranslations:function(){return e.apply(this,arguments)},translate:function(){return n?t.apply(this,arguments):arguments[0]}}}}}),angular.module("cf.feedback").service("$feedback",["cfFeedback","FEEDBACK_TYPE",function(e,t){this.error=function(e,a,i){n(t.ERROR,e,a,i)},this.notice=function(e,a,i){n(t.NOTICE,e,a,i)},this.success=function(e,a,i){n(t.SUCCESS,e,a,i)},this.alert=function(e,a,i){n(t.ALERT,e,a,i)};var n=function(t,n,a,i){var c={message:n,type:t};void 0!==a&&(c.data=a),void 0!==i&&(c.contextElement=i),e.publish(c)}}]);
//# sourceMappingURL=data:application/json;base64,
